debug: false
management.endpoint.web.exposure.include: "*"

logging:
  level:
    com.study.boardproject: debug
    org.springframework.web.servlet: debug # request, response만 debug로 뽑는다.
    org.hibernate.orm.jdbc.bind: trace  # jpa를 사용할때 쿼리를 debug로 관찰할때 바인딩 파라미터를 보이게 한다. springBoot3.x부터는 이렇게 써야한다.

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: wlsdks12
    password: wlsdks12
    driver-class-name: com.mysql.cj.jdbc.Driver
# h2 테스트 데이터데이스 접속정보를 확인하기위해 임시로 작성해서 접속할때 사용한다.
#    url: jdbc:h2:mem:testdb
#    username: sa
#    password:
#    driver-class-name: org.h2.Driver
  jpa:
    defer-datasource-initialization: true # test용 db데이터를 만들수 있게 한다.
    hibernate.ddl-auto: create #엔티티로 ddl문을 만들어서 생성할것인가 설정
    open-in-view: false
    show-sql: true
    properties: # jpa 구현체 선택
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100 # 한번에 100개의 쿼리를 묶어서 bulk로 select가 가능하게 해준다. (N+1 해결방법중 하나)
        highlight_sql: true # 쿼리를 보기쉽게 하이라이트를 설정한다.
  #  h2.console.enabled: true # 인메모리 db로 h2를 쓸건데 활성화할건지 물어보는것

  sql.init.mode: always # resources 폴더에 만든 data.sql을 언제 작동시킬지 정하는것 (테스트, 아예 동작x, 리얼환경 중 선택)

  # halExplorer 설정
  data.rest:
    base-path: /api
    detection-strategy: annotated
  # thymeleaf 커스텀 설정 추가
  thymeleaf3:
    decoupled-logic: true

---  # yaml 파일은 "-" 모양 줄 3개를 기준으로 여러개의 document를 만들수가 있다.
#
#spring:
#  config.activate.on-profile: testdb # test전용 db를 설정한다.
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql # mysql모드를 활성화시킨다.
#    driverClassName: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none